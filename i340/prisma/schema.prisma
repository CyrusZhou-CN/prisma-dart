generator client {
  provider        = "dart run orm"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Soggetto {
  uuid                 String                @id @default(uuid())
  ragioneSociale       String
  iban                 String?
  tipo                 TipoSoggetto
  negozioPreferitoUuid String?
  codiceFiscale        String?               @unique
  note                 String?
  soggettoBusinessInfo SoggettoBusinessInfo?
  domicili             Domicilio[]
  praticheIntestate    Pratica[]
  contratti            Contratto[]
  indirizziEmail       IndirizzoEmail[]
  numeriTelefono       NumeroTelefono[]
  negozioPreferito     Negozio?              @relation(fields: [negozioPreferitoUuid], references: [codice])
  prodottiOrdinati     Ordine[]
  leads                Lead[]
  // TODO remove nullability after upgrade to Prisma > 4.x
  privacy              Privacy?

  @@index([negozioPreferitoUuid])
  @@index([tipo])
}

model Privacy {
  uuid          String    @id @default(uuid())
  trattamento   Boolean   @default(true)
  comunicazione Boolean   @default(false)
  profilazione  Boolean   @default(false)
  soggetto      Soggetto? @relation(fields: [soggettoUuid], references: [uuid], onDelete: Cascade)
  soggettoUuid  String?   @unique
}

model SoggettoBusinessInfo {
  uuid                 String                @id @default(uuid())
  rea                  String?
  partitaIVA           String                @unique
  sdi                  String?
  soggettoUuid         String                @unique
  legaleRappresentante LegaleRappresentante?
  referente            Referente?
  soggetto             Soggetto              @relation(fields: [soggettoUuid], references: [uuid], onDelete: Cascade)

  @@index([soggettoUuid])
}

model LegaleRappresentante {
  uuid                     String               @id @default(uuid())
  nome                     String
  cognome                  String
  soggettoBusinessInfoUuid String               @unique
  numeroTelefono           NumeroTelefono?
  indirizzoEmail           IndirizzoEmail?
  soggettoBusinessInfo     SoggettoBusinessInfo @relation(fields: [soggettoBusinessInfoUuid], references: [uuid])
}

model Referente {
  uuid                     String               @id @default(uuid())
  nome                     String
  cognome                  String
  soggettoBusinessInfoUuid String               @unique
  numeroTelefono           NumeroTelefono?
  indirizzoEmail           IndirizzoEmail?
  soggettoBusinessInfo     SoggettoBusinessInfo @relation(fields: [soggettoBusinessInfoUuid], references: [uuid])
}

model IndirizzoEmail {
  uuid                     String                @id @default(uuid())
  indirizzo                String
  etichetta                String?
  soggettoUuid             String?
  legaleRappresentanteUuid String?               @unique
  referenteUuid            String?               @unique
  soggetto                 Soggetto?             @relation(fields: [soggettoUuid], references: [uuid], onDelete: Cascade)
  referente                Referente?            @relation(fields: [referenteUuid], references: [uuid])
  legaleRappresentante     LegaleRappresentante? @relation(fields: [legaleRappresentanteUuid], references: [uuid])

  @@unique([indirizzo, soggettoUuid])
  @@index([soggettoUuid])
}

model NumeroTelefono {
  uuid                    String                @id @default(uuid())
  numero                  String
  etichetta               String?
  soggettoUuid            String?
  legaleRappresentateUuid String?               @unique
  referenteUuid           String?               @unique
  soggetto                Soggetto?             @relation(fields: [soggettoUuid], references: [uuid], onDelete: Cascade)
  legaleRappresentate     LegaleRappresentante? @relation(fields: [legaleRappresentateUuid], references: [uuid])
  referente               Referente?            @relation(fields: [referenteUuid], references: [uuid])

  @@unique([numero, soggettoUuid])
  @@index([soggettoUuid])
}

model Domicilio {
  uuid                        String                        @id @default(uuid())
  etichetta                   String?
  indirizzo                   String?
  numeroCivico                String?
  citta                       String?
  cap                         String?
  provincia                   String?
  soggettoUuid                String
  soggetto                    Soggetto                      @relation(fields: [soggettoUuid], references: [uuid], onDelete: Cascade)
  contrattiEnelXAssicurazione ContrattoEnelXAssicurazione[]
  forniture                   Fornitura[]
  contrattiEnelFibra          ContrattoEnelFibra[]
  prodottiOrdinati            Ordine[]
  leads                       Lead[]

  @@index([soggettoUuid])
}

model ServizioEwo {
  id                      String            @id
  nome                    String            @unique
  fornitoreId             String
  tipoServizioEwo         TipoServizioEwo
  fornitore               Fornitore         @relation(fields: [fornitoreId], references: [id])
  tipiPratiche            TipoPratica[]
  colore                  String
  icona                   String
  forniture               Fornitura[]
  statiPossibiliPratiche  StatoPratica[]
  statiPossibiliContratti StatoContratto[]
  offerte                 Offerta[]
  moduliContratto         ModuloContratto[]

  @@index([fornitoreId])
}

model Fornitura {
  uuid          String         @id @default(uuid())
  etichetta     String?
  domicilioUuid String
  servizioEwoId String
  domicilio     Domicilio      @relation(fields: [domicilioUuid], references: [uuid], onDelete: Cascade)
  servizioEwo   ServizioEwo    @relation(fields: [servizioEwoId], references: [id])
  fornituraLuce FornituraLuce?
  fornituraGas  FornituraGas?

  @@index([domicilioUuid])
  @@index([servizioEwoId])
}

model FornituraLuce {
  uuid              String              @id @default(uuid())
  pod               String              @unique
  fornituraUuid     String              @unique
  potenza           Float?
  tensione          Float?
  consumoAnnuoLuce  ConsumoAnnuoLuce?
  contrattiEnelLuce ContrattoEnelLuce[]
  fornitura         Fornitura           @relation(fields: [fornituraUuid], references: [uuid], onDelete: Cascade)

  @@index([fornituraUuid])
}

model ConsumoAnnuoLuce {
  uuid                        String        @id @default(uuid())
  consumo                     Float
  meseRiferimentoConsumoAnnuo DateTime
  fornituraLuceUuid           String        @unique
  fornituraLuce               FornituraLuce @relation(fields: [fornituraLuceUuid], references: [uuid], onDelete: Cascade)

  @@index([meseRiferimentoConsumoAnnuo, fornituraLuceUuid])
  @@index([fornituraLuceUuid])
}

model FornituraGas {
  uuid                  String               @id @default(uuid())
  pdr                   String               @unique
  fornituraUuid         String               @unique
  classeMisuratoreGasId String?
  matricolaContatore    String?
  remi                  String?
  classeMisuratore      ClasseMisuratoreGas? @relation(fields: [classeMisuratoreGasId], references: [id])
  consumoAnnuoGas       ConsumoAnnuoGas?
  contrattiEnelGas      ContrattoEnelGas[]
  fornitura             Fornitura            @relation(fields: [fornituraUuid], references: [uuid], onDelete: Cascade)

  @@index([classeMisuratoreGasId])
  @@index([fornituraUuid])
}

model ConsumoAnnuoGas {
  uuid                        String       @id @default(uuid())
  consumo                     Float
  meseRiferimentoConsumoAnnuo DateTime
  fornituraGasUuid            String       @unique
  fornituraGas                FornituraGas @relation(fields: [fornituraGasUuid], references: [uuid], onDelete: Cascade)

  @@index([meseRiferimentoConsumoAnnuo, fornituraGasUuid])
  @@index([fornituraGasUuid])
}

model Contratto {
  uuid                        String                        @id @default(uuid())
  codice                      String                        @unique
  dataInserimento             DateTime                      @default(now())
  dataAttivazione             DateTime?
  ultimoAggiornamentoStato    DateTime?
  trend                       Boolean?
  nota                        String?
  marketingEnelEnergia        Boolean                       @default(false)
  marketingGruppoEnel         Boolean                       @default(false)
  profilazioneEnelEnergia     Boolean                       @default(false)
  bollettaWeb                 Boolean                       @default(false)
  rid                         Boolean                       @default(false)
  dataCessazione              DateTime?
  mesiDurata                  Int?
  offertaUuid                 String?
  contrattiEnelLuce           ContrattoEnelLuce[]
  contrattiEnelGas            ContrattoEnelGas[]
  contrattiEnelFibra          ContrattoEnelFibra[]
  contrattiEnelXAssicurazione ContrattoEnelXAssicurazione[]
  stato                       StatoContratto                @relation(fields: [statoContrattoId], references: [id])
  statoContrattoId            String
  soggetto                    Soggetto?                     @relation(fields: [soggettoUuid], references: [uuid])
  soggettoUuid                String?
  utente                      Utente?                       @relation(fields: [utenteUuid], references: [uuid])
  utenteUuid                  String?
  negozio                     Negozio?                      @relation(fields: [negozioCodice], references: [codice])
  negozioCodice               String?
  pratica                     Pratica?                      @relation(fields: [praticaUuid], references: [uuid])
  praticaUuid                 String?
  modulo                      ModuloContratto?              @relation(fields: [moduloContrattoId], references: [id])
  moduloContrattoId           String?

  @@index([statoContrattoId])
  @@index([praticaUuid])
  @@index([negozioCodice])
  @@index([utenteUuid])
  @@index([soggettoUuid])
  @@index([offertaUuid])
  @@index([moduloContrattoId])
  @@index([dataInserimento])
}

model ModuloContratto {
  id                    String              @id
  nome                  String              @unique
  fornitoreId           String
  clienteTarget         TipoSoggetto
  canale                Canale
  serviziEwoCollegabili ServizioEwo[]
  contratti             Contratto[]
  fornitore             Fornitore           @relation(fields: [fornitoreId], references: [id])
  tipoModulo            TipoModuloContratto @relation(fields: [tipoModuloContrattoId], references: [id])
  tipoModuloContrattoId String

  @@index([tipoModuloContrattoId])
  @@index([fornitoreId])
  @@index([canale])
}

model TipoModuloContratto {
  id                       String            @id
  nome                     String
  numeroOfferteCollegabili Int
  ModuloContratto          ModuloContratto[]
}

model StatoContratto {
  id                          String                        @id
  nome                        String
  contratti                   Contratto[]
  serviziEwo                  ServizioEwo[]
  contrattiEnelLuce           ContrattoEnelLuce[]
  contrattiEnelGas            ContrattoEnelGas[]
  contrattiEnelFibra          ContrattoEnelFibra[]
  contrattiEnelXAssicurazione ContrattoEnelXAssicurazione[]
}

model Offerta {
  uuid                        String                        @id @default(uuid())
  nome                        String                        @unique
  dataFineOfferta             DateTime
  dataInizioOfferta           DateTime
  servizioEwoId               String
  servizioEwo                 ServizioEwo                   @relation(fields: [servizioEwoId], references: [id])
  contrattiEnelLuce           ContrattoEnelLuce[]
  contrattiEnelGas            ContrattoEnelGas[]
  contrattiEnelFibra          ContrattoEnelFibra[]
  contrattiEnelXAssicurazione ContrattoEnelXAssicurazione[]
  offerteIncluse              Offerta[]                     @relation("OfferteIncluse")
  inclusaInOfferte            Offerta[]                     @relation("OfferteIncluse")

  @@index([servizioEwoId])
}

model Pratica {
  uuid                     String        @id @default(uuid())
  codice                   String
  dataInserimento          DateTime      @default(now())
  tipoPraticaId            String
  soggettoUuid             String?
  utenteUuid               String?
  negozioCodice            String?
  statoPraticaId           String?
  ultimoAggiornamentoStato DateTime?
  tipoPratica              TipoPratica   @relation(fields: [tipoPraticaId], references: [id])
  soggetto                 Soggetto?     @relation(fields: [soggettoUuid], references: [uuid])
  utente                   Utente?       @relation(fields: [utenteUuid], references: [uuid])
  negozio                  Negozio?      @relation(fields: [negozioCodice], references: [codice])
  stato                    StatoPratica? @relation(fields: [statoPraticaId], references: [id])
  contratto                Contratto[]

  @@unique([codice, tipoPraticaId], name: "codicePratica_tipoPratica")
  @@index([tipoPraticaId])
  @@index([statoPraticaId])
  @@index([negozioCodice])
  @@index([utenteUuid])
  @@index([soggettoUuid])
}

model TipoPratica {
  id         String        @id
  nome       String        @unique
  serviziEwo ServizioEwo[]
  pratiche   Pratica[]
}

model StatoPratica {
  id         String        @id
  nome       String
  pratiche   Pratica[]
  serviziEwo ServizioEwo[]
}

model ContrattoEnelLuce {
  uuid              String         @id @default(uuid())
  statoContrattoId  String
  fornituraLuceUuid String
  contrattoUuid     String
  offertaUuid       String?
  stato             StatoContratto @relation(fields: [statoContrattoId], references: [id])
  fornituraLuce     FornituraLuce  @relation(fields: [fornituraLuceUuid], references: [uuid], onDelete: Cascade)
  contratto         Contratto      @relation(fields: [contrattoUuid], references: [uuid], onDelete: Cascade)
  offerta           Offerta?       @relation(fields: [offertaUuid], references: [uuid])

  @@index([statoContrattoId])
  @@index([contrattoUuid])
  @@index([fornituraLuceUuid])
  @@index([offertaUuid])
}

model ContrattoEnelGas {
  uuid             String         @id @default(uuid())
  statoContrattoId String
  fornituraGasUuid String
  contrattoUuid    String
  offertaUuid      String?
  stato            StatoContratto @relation(fields: [statoContrattoId], references: [id])
  fornituraGas     FornituraGas   @relation(fields: [fornituraGasUuid], references: [uuid], onDelete: Cascade)
  contratto        Contratto      @relation(fields: [contrattoUuid], references: [uuid], onDelete: Cascade)
  offerta          Offerta?       @relation(fields: [offertaUuid], references: [uuid])

  @@index([statoContrattoId])
  @@index([fornituraGasUuid])
  @@index([contrattoUuid])
  @@index([offertaUuid])
}

model ContrattoEnelXAssicurazione {
  uuid             String         @id @default(uuid())
  statoContrattoId String
  contrattoUuid    String
  domicilioUuid    String
  offertaUuid      String?
  stato            StatoContratto @relation(fields: [statoContrattoId], references: [id])
  contratto        Contratto      @relation(fields: [contrattoUuid], references: [uuid], onDelete: Cascade)
  domicilio        Domicilio      @relation(fields: [domicilioUuid], references: [uuid], onDelete: Cascade)
  offerta          Offerta?       @relation(fields: [offertaUuid], references: [uuid])

  @@index([statoContrattoId])
  @@index([contrattoUuid])
  @@index([domicilioUuid])
  @@index([offertaUuid])
}

model ContrattoEnelFibra {
  uuid                         String                       @id @default(uuid())
  statoContrattoId             String
  contrattoUuid                String
  servizioContrattoEnelFibra   ServizioContrattoEnelFibra
  tipoContrattoEnelFibra       TipoContrattoEnelFibra
  tecnologiaContrattoEnelFibra TecnologiaContrattoEnelFibra
  domicilioUuid                String?
  offertaUuid                  String?
  stato                        StatoContratto               @relation(fields: [statoContrattoId], references: [id])
  contratto                    Contratto                    @relation(fields: [contrattoUuid], references: [uuid], onDelete: Cascade)
  offerta                      Offerta?                     @relation(fields: [offertaUuid], references: [uuid])
  domicilio                    Domicilio?                   @relation(fields: [domicilioUuid], references: [uuid])

  @@index([statoContrattoId])
  @@index([contrattoUuid])
  @@index([offertaUuid])
  @@index([domicilioUuid])
}

model ClasseMisuratoreGas {
  portataMin      Float
  portataNominale Float
  portataMax      Float
  id              String         @id
  classe          String         @unique
  fornituraGas    FornituraGas[]
}

model Fornitore {
  id              String            @id
  nome            String            @unique
  serviziEwo      ServizioEwo[]
  moduliContratto ModuloContratto[]
  prodotti        Prodotto[]
}

/// Model for "Prodotti" sold to "Clienti"
model Ordine {
  /// Unique identifier
  uuid            String     @id @default(uuid())
  codice          String     @unique
  /// Date when the "Prodotto" was sold
  dataInserimento DateTime   @default(now())
  /// Valore dell'ordine preventivato dall'agente
  valore          Float
  /// The "Prodotti" sold
  prodotti        Prodotto[]
  /// The "Cliente" who bought the "Prodotto"
  soggetto        Soggetto   @relation(fields: [soggettoUuid], references: [uuid])
  soggettoUuid    String
  /// The "Domicilio" linked to this "Prodotto" (and usually used in)
  domicilio       Domicilio? @relation(fields: [domicilioUuid], references: [uuid])
  domicilioUuid   String?

  statoOrdine   StatoOrdine? @relation(fields: [statoOrdineId], references: [id])
  statoOrdineId String?

  lead     Lead?   @relation(fields: [leadUuid], references: [uuid])
  leadUuid String?

  utente        Utente   @relation(fields: [utenteUuid], references: [uuid])
  utenteUuid    String
  negozio       Negozio? @relation(fields: [negozioCodice], references: [codice])
  negozioCodice String?

  @@index([soggettoUuid])
  @@index([domicilioUuid])
  @@index([statoOrdineId])
  @@index([leadUuid])
  @@index([utenteUuid])
  @@index([negozioCodice])
}

model StatoOrdine {
  id        String    @id
  nome      String
  ordini    Ordine[]
  tipoStato TipoStato
  /// ordinamento del progresso degli stati
  ordine    Int
  colore    String
}

/// Model of unique "Prodotti" sellable to the "Clienti"
model Prodotto {
  uuid             String       @id @default(uuid())
  /// Name of the product
  modello          String
  /// Price of the product
  prezzo           Float?
  /// Tells if the product is available for sale
  vendibileDal     DateTime?
  /// Tells if the product is still available for sale
  vendibileAl      DateTime?
  /// The "Produttore" of this "Prodotto"
  produttore       Produttore   @relation(fields: [produttoreId], references: [id])
  produttoreId     String
  /// The "Prodotti Rivenduti" of this prodotto
  prodottiOrdinati Ordine[]
  /// The "Fornitore" of this "Prodotto"
  fornitore        Fornitore    @relation(fields: [fornitoreId], references: [id])
  fornitoreId      String
  tipoProdotto     TipoProdotto @relation(fields: [tipoProdottoId], references: [id])
  tipoProdottoId   String

  @@index([produttoreId])
  @@index([fornitoreId])
  @@index([tipoProdottoId])
}

model TipoProdotto {
  id   String @id
  nome String @unique

  prodotti Prodotto[]
}

/// Model of unique "Produttori"
model Produttore {
  /// Unique identifier
  id   String @id
  /// Name of the "Produttore"
  nome String @unique

  /// The "Prodotti" produced by this "Produttore"
  prodotti Prodotto[]
}

model Utente {
  uuid                 String        @id @default(uuid())
  firebaseUid          String?       @unique
  email                String        @unique
  ruolo                RuoloUtente
  photoUrl             String?
  negozioCodice        String?
  nomeVisualizzato     String
  negozio              Negozio?      @relation(fields: [negozioCodice], references: [codice])
  contratti            Contratto[]
  pratiche             Pratica[]
  ingressi             Ingressi[]
  leadsGestiti         Lead[]        @relation(name: "LeadsGestore")
  leadsAssegnati       Lead[]        @relation(name: "LeadsAgente")
  opportunitaGestite   Opportunita[] @relation(name: "GestoriLead")
  opportunitaAssegnate Opportunita[] @relation(name: "Agenti")
  ordini               Ordine[]
  history              History[]

  @@index([negozioCodice])
}

model Negozio {
  codice        String      @id
  nome          String      @unique
  pratiche      Pratica[]
  utenti        Utente[]
  contratti     Contratto[]
  soggetti      Soggetto[]
  zonaNegozio   ZonaNegozio @relation(fields: [zonaNegozioId], references: [id])
  zonaNegozioId String
  ingressi      Ingressi[]
  leads         Lead[]
  Ordine        Ordine[]

  @@index([zonaNegozioId])
}

model Ingressi {
  uuid          String   @id @default(uuid())
  data          DateTime
  clienti       Int
  nonClienti    Int
  utenteUuid    String
  negozioCodice String
  utente        Utente   @relation(fields: [utenteUuid], references: [uuid])
  negozio       Negozio  @relation(fields: [negozioCodice], references: [codice])

  @@index([data])
  @@index([negozioCodice])
  @@index([utenteUuid])
}

model ZonaNegozio {
  id     String    @id
  nome   String    @unique
  negozi Negozio[]
}

model Lead {
  uuid                 String           @id @default(uuid())
  opportunita          Opportunita      @relation(fields: [opportunitaUuid], references: [uuid])
  opportunitaUuid      String
  soggetto             Soggetto         @relation(fields: [soggettoUuid], references: [uuid])
  soggettoUuid         String
  domicilio            Domicilio?       @relation(fields: [domicilioUuid], references: [uuid])
  domicilioUuid        String?
  statoOpportunita     StatoOpportunita @relation(fields: [statoOpportunitaUuid], references: [uuid])
  statoOpportunitaUuid String
  utente               Utente?          @relation(fields: [utenteUuid], references: [uuid], name: "LeadsGestore")
  utenteUuid           String?
  negozio              Negozio?         @relation(fields: [negozioCodice], references: [codice])
  negozioCodice        String?
  agente               Utente?          @relation(fields: [agenteUuid], references: [uuid], name: "LeadsAgente")
  agenteUuid           String?
  appuntamenti         String?          @db.MediumText
  form                 String?          @db.MediumText
  dataInserimento      DateTime?
  dataScadenza         DateTime?
  dataAppuntamento     DateTime?
  nota                 String?
  ordine               Ordine[]
  history              History[]

  @@index([utenteUuid])
  @@index([domicilioUuid])
  @@index([opportunitaUuid])
  @@index([soggettoUuid])
  @@index([statoOpportunitaUuid])
  @@index([agenteUuid])
  @@index([negozioCodice])
}

model Opportunita {
  uuid        String    @id @default(uuid())
  nome        String
  dataInizio  DateTime?
  dataFine    DateTime?
  leads       Lead[]
  form        String?   @db.MediumText
  gestoriLead Utente[]  @relation(name: "GestoriLead")
  agenti      Utente[]  @relation(name: "Agenti")
}

model StatoOpportunita {
  uuid            String     @id @default(uuid())
  nome            String
  tipoStato       TipoStato?
  /// ordinamento del progresso degli stati
  ordine          Int?
  colore          String
  opportunitaUuid String
  leads           Lead[]

  @@index([opportunitaUuid])
  @@index([ordine])
}

model History {
  uuid      String   @id @default(uuid())
  timestamp DateTime

  event String

  // History types
  comment    HistoryComment?
  attachment HistoryAttachment?

  // Semantic Tables
  Utente     Utente @relation(fields: [utenteUuid], references: [uuid], onDelete: Cascade)
  utenteUuid String

  Lead     Lead?   @relation(fields: [leadUuid], references: [uuid], onDelete: Cascade)
  leadUuid String?

  @@index([utenteUuid])
  @@index([leadUuid])
}

model HistoryComment {
  comment String

  History     History @relation(fields: [historyUuid], references: [uuid])
  historyUuid String  @unique
}

model HistoryAttachment {
  url  String
  name String

  History     History @relation(fields: [historyUuid], references: [uuid])
  historyUuid String  @unique
}

enum TipoServizioEwo {
  FORNITURA
  DOMICILIO
}

enum TipoSoggetto {
  CONSUMER
  BUSINESS
}

enum Canale {
  SEP
  NEVE
  CORPORATE
}

enum ServizioContrattoEnelFibra {
  DATI
  DATI_VOCE
}

enum TipoContrattoEnelFibra {
  NUOVA_ATTIVAZIONE
  MIGRAZIONE
}

enum TecnologiaContrattoEnelFibra {
  FTTH
  FTTC
}

enum RuoloUtente {
  CONSULENTE
  AGENTE
  OPERATORE
  RESPONSABILE
  AMMINISTRATORE
  DEVELOPER
}

enum TipoStato {
  DA_FARE
  IN_CORSO
  COMPLETATO
  CANCELLATO
}
