// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void query_engine_new(
    DartString options,
    StringCallback callback,
    QueryEngineNewCallback created,
    VoidCallback error,
  ) {
    return _query_engine_new(
      options,
      callback,
      created,
      error,
    );
  }

  late final _query_engine_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(DartString, StringCallback, QueryEngineNewCallback,
              VoidCallback)>>('query_engine_new');
  late final _query_engine_new = _query_engine_newPtr.asFunction<
      void Function(
          DartString, StringCallback, QueryEngineNewCallback, VoidCallback)>();

  void query_engine_connect(
    ffi.Pointer<ffi.Int> engine,
    VoidCallback callback,
    VoidCallback error,
    DartString trace,
  ) {
    return _query_engine_connect(
      engine,
      callback,
      error,
      trace,
    );
  }

  late final _query_engine_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Int>, VoidCallback, VoidCallback,
              DartString)>>('query_engine_connect');
  late final _query_engine_connect = _query_engine_connectPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Int>, VoidCallback, VoidCallback, DartString)>();
}

typedef DartString = ffi.Pointer<ffi.Int>;
typedef StringCallback
    = ffi.Pointer<ffi.NativeFunction<StringCallbackFunction>>;
typedef StringCallbackFunction = ffi.Void Function(DartString);
typedef DartStringCallbackFunction = void Function(DartString);
typedef QueryEngineNewCallback
    = ffi.Pointer<ffi.NativeFunction<QueryEngineNewCallbackFunction>>;
typedef QueryEngineNewCallbackFunction = ffi.Void Function(
    ffi.Pointer<ffi.Int>);
typedef DartQueryEngineNewCallbackFunction = void Function(
    ffi.Pointer<ffi.Int>);
typedef VoidCallback = ffi.Pointer<ffi.NativeFunction<VoidCallbackFunction>>;
typedef VoidCallbackFunction = ffi.Void Function();
typedef DartVoidCallbackFunction = void Function();
