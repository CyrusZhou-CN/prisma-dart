import 'dart:convert';
import 'dart:io';

import 'package:orm/generator_helper.dart';
import 'package:path/path.dart';

import '../utils/find_project.dart';
import 'dart_style_ignore_builder.dart';
import 'exports_builder.dart';
import 'generator_options.dart';
import 'imports_generator.dart';
import 'model_delegate_builder.dart';
import 'schema/schema_generator.dart';

final demo = null;

void main(List<String> args) {
  print(demo.runtimeType);
}

/// Resolve output.
String _resolveOutput(EnvValue? output, String schemaPath) {
  if (output == null || output.value.isEmpty) {
    return joinRelativePaths(['lib', 'src', 'generated']);
  }

  return relative(join(dirname(schemaPath), output.value));
}

/// Get generated file.
File _getGeneratedFile(GeneratorOptions options) {
  final String output =
      _resolveOutput(options.config.output, options.schemaPath);
  final String filename = 'prisma_client.dart';

  final File file = File(join(output, filename));
  if (file.existsSync()) {
    file.deleteSync();
  }

  return file..createSync(recursive: true);
}

/// Run Dart client generator
Future<void> generator(GeneratorOptions options) async {
  // Get output file.
  final File output = _getGeneratedFile(options);

  // Create output IO sink.
  final IOSink sink = output.openWrite(
    mode: FileMode.write,
    encoding: utf8,
  );

  // Generate headers.
  sink.writeln('// GENERATED CODE - DO NOT MODIFY BY HAND');
  sink.writeln(dartStyleIgnoreBuilder());
  sink.writeln();

  // Generate imports.
  sink.write(await importsGenerator());
  sink.writeln();

  // Build exports.
  sink.writeln(exportsBuilder());
  sink.writeln();

  // Generate power by.
  sink.writeln('//'.padRight(80, '*'));
  sink.writeln('// This file was generated by Prisma ORM');
  sink.writeln('// GitHub: https://github.com/odroe/prisma-dart');
  sink.writeln('//'.padRight(80, '*'));
  sink.writeln();

  // Generate schema.
  final String schema = await schemaGenerator(options.dmmf.schema);
  if (schema.isNotEmpty) sink.writeln(schema);

  // Builder model delegates.
  final String modelDelegates = modelDelegateBuilder(options.dmmf);
  if (modelDelegates.isNotEmpty) sink.writeln(modelDelegates);

  // Close sink.
  await sink.close();

  // Format generated file.
  await Process.run(
    Platform.executable,
    [
      'format',
      '--fix',
      '-o',
      'write',
      basename(output.path),
    ],
    workingDirectory: output.parent.path,
  );
}
